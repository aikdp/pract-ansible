- name: configuration for the backend
  hosts: backend
  become: yes
  vars:
    password: ExpenseApp@1
    hst: "mysql.telugudevops.online"
    user: root  
    package:
      - nodejs
      - mysql
  tasks:
    - name: " disabling node.js "
      ansible.builtin.command: " dnf module disable nodejs -y "

    - name: " enabling node.js version20 "
      ansible.builtin.command: " dnf module enable nodejs:20 -y "

    - name: " install node.js "
      ansible.builtin.package:
        name: "{{ package }}"
        state: present

    - name: " installing pip modules "
      ansible.builtin.pip:
        name: 
         - PyMySQL
         - cryptography

    - name: Create a user 'expense' with a home directory
      ansible.builtin.user:
        name: expense
        state: present

    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: /app
        state: directory

    - name: Download file from a file path
      ansible.builtin.get_url:
        url: https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
        dest: /tmp/backend.zip
    
    - name: Unarchive a file that is already on the remote machine
      ansible.builtin.unarchive:
       src: /tmp/backend.zip
       dest: /app
       remote_src: yes
    
    - name: " downloading dependencies "
      ansible.builtin.command: " npm install "
      args:
        chdir: /app
    
    - name: "copy the backend service file"
      ansible.builtin.copy:
        src: backend.service
        dest: /etc/systemd/system/backend.service

    - name: " importing the backend.sql "
      community.mysql.mysql_db:
        login_user: "{{ user }}"
        login_password: "{{ password }}"
        login_host: "{{ hst }}"
        target: /app/schema/backend.sql
        name: all
        state: import
    
    - name: " daemon reload "
      ansible.builtin.systemd_service:
        daemon_reload: true
        state: restarted
        name: backend
        enabled: true
